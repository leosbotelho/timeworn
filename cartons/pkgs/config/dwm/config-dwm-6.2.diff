diff -up dwm-6.2/config.def.h dwm-6.2-personal/config.def.h
--- dwm-6.2/config.def.h	2019-02-02 10:55:28.000000000 -0200
+++ dwm-6.2-personal/config.def.h	2019-11-17 18:49:08.719767094 -0300
@@ -3,7 +3,7 @@
 /* appearance */
 static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
+static const int showbar            = 0;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
@@ -26,15 +26,16 @@ static const Rule rules[] = {
 	 *	WM_CLASS(STRING) = instance, class
 	 *	WM_NAME(STRING) = title
 	 */
-	/* class      instance    title       tags mask     isfloating   monitor */
-	{ "Gimp",     NULL,       NULL,       0,            1,           -1 },
-	{ "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+	/* class      instance    title       tags mask     iscentered     isfloating   monitor */
+	{ "Gimp",     NULL,       NULL,       0,            0,             1,           -1 },
+	{ "Firefox",  NULL,       NULL,       1 << 8,       0,             0,           -1 },
+  { "XTerm", "xterm-centered", NULL,       0,            1,             1,           -1 },
 };
 
 /* layout(s) */
 static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -57,7 +58,25 @@ static const Layout layouts[] = {
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
 static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
-static const char *termcmd[]  = { "st", NULL };
+static const char *termcmd[]  = { "xterm", NULL };
+
+static const char *lockcmd[] = { "lock", NULL };
+
+static const char *termcenteredcmd[] = { "xterm", "-name", "xterm-centered", NULL };
+
+#define FF_NEWTAB_CMD(url) { .v = (const char*[]){ "firefox", "-new-tab", url, NULL } }
+#define FF_SEARCH_CMD(label, searchUrl) \
+  SHCMD("echo '" label "' | dmenu | head -c -1 | jq -s -R -r @uri | xargs -I {} firefox -new-tab '" searchUrl "'")
+
+static const char *mutecmd[] = { "amixer", "-q", "sset", "Master", "toggle", NULL };
+static const char *upvolcmd[]   = { "amixer", "set", "Master", "3%+", NULL };
+static const char *downvolcmd[] = { "amixer", "set", "Master", "3%-", NULL };
+
+static const char *newffcmd[] = { "firefox", NULL };
+
+#define TOGGLE_HDMI_CMD(profile) \
+  SHCMD("([ \"$(autorandr --detected | rg -o mobile)\" == 'mobile' ] && echo 'mobile' || echo '" profile "') " \
+        "| xargs -I {} autorandr --load '{}' --force")
 
 static Key keys[] = {
 	/* modifier                     key        function        argument */
@@ -94,6 +113,20 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+  { ControlMask,                  XK_d,      spawn,          FF_SEARCH_CMD("DuckDuckGo", "https://duckduckgo.com?q={}") },
+  { ControlMask,                  XK_g,      spawn,          FF_SEARCH_CMD("Google", "https://www.google.com/search?hl=en&cr=US&q={}") },
+  { Mod4Mask,                     XK_f,      spawn,          {.v = newffcmd } },
+  { Mod4Mask,                     XK_d,      spawn,          FF_NEWTAB_CMD("https://duckduckgo.com") },
+  { Mod4Mask,                     XK_g,      spawn,          FF_NEWTAB_CMD("https://www.google.com/advanced_search?hl=en") },
+  { 0,                            0x1008ff12, spawn,         {.v = mutecmd } },
+  { 0,                            0x1008ff11, spawn,         {.v = downvolcmd } },
+  { 0,                            0x1008ff13, spawn,         {.v = upvolcmd } },
+  { 0,                            0x1008ff03, spawn,         SHCMD("systemctl --user stop redshift.service") },
+  { 0,                            0x1008ff02, spawn,         SHCMD("systemctl --user start redshift.service") },
+  { 0,                            0x1008ff59, spawn,         TOGGLE_HDMI_CMD("hdmi-only") },
+  { Mod4Mask,                     0x1008ff59, spawn,         TOGGLE_HDMI_CMD("hdmi-mirror") },
+  { Mod4Mask,                     XK_p,      spawn,          {.v = termcenteredcmd } },
+  { Mod4Mask,                     XK_l,      spawn,          {.v = lockcmd } },
 };
 
 /* button definitions */
diff -up dwm-6.2/dwm.c dwm-6.2-personal/dwm.c
--- dwm-6.2/dwm.c	2019-02-02 10:55:28.000000000 -0200
+++ dwm-6.2-personal/dwm.c	2019-09-21 00:09:12.237498152 -0300
@@ -92,7 +92,7 @@ struct Client {
 	int basew, baseh, incw, inch, maxw, maxh, minw, minh;
 	int bw, oldbw;
 	unsigned int tags;
-	int isfixed, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
+	int isfixed, iscentered, isfloating, isurgent, neverfocus, oldstate, isfullscreen;
 	Client *next;
 	Client *snext;
 	Monitor *mon;
@@ -137,6 +137,7 @@ typedef struct {
 	const char *instance;
 	const char *title;
 	unsigned int tags;
+	int iscentered;
 	int isfloating;
 	int monitor;
 } Rule;
@@ -297,6 +298,7 @@ applyrules(Client *c)
 		&& (!r->class || strstr(class, r->class))
 		&& (!r->instance || strstr(instance, r->instance)))
 		{
+			c->iscentered = r->iscentered;
 			c->isfloating = r->isfloating;
 			c->tags |= r->tags;
 			for (m = mons; m && m->num != r->monitor; m = m->next);
@@ -1049,6 +1051,11 @@ manage(Window w, XWindowAttributes *wa)
 		&& (c->x + (c->w / 2) < c->mon->wx + c->mon->ww)) ? bh : c->mon->my);
 	c->bw = borderpx;
 
+	if(c->iscentered) {
+		c->x = (c->mon->mw - WIDTH(c)) / 2;
+		c->y = (c->mon->mh - HEIGHT(c)) / 2;
+	}
+
 	wc.border_width = c->bw;
 	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
 	XSetWindowBorder(dpy, w, scheme[SchemeNorm][ColBorder].pixel);
Only in dwm-6.2-personal: dwm.c.orig
